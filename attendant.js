const socket = io();
socket.emit("attendant join");

const form = document.getElementById("chat-form");
const messagesList = document.getElementById("messages");
const typingIndicator = document.getElementById("typing-indicator");
const endServiceButton = document.getElementById("end-service");
const toggleSoundButton = document.getElementById("toggle-sound");

const notificationIcon = document.querySelector(".notification-icon");
const notificationList = document.getElementById("notification-list");
const notificationCount = document.getElementById("notification-count");
const queueList = document.getElementById("queue-list");

let soundEnabled = true;
let isAttending = false; // 游댳 Controla se o atendente est치 em atendimento
let currentUser = null; // 游댳 Armazena o ID do usu치rio conectado

// 游댳 Recupera sess칚o se a p치gina for recarregada
socket.on("resume chat", (userId) => {
  currentUser = userId;
  isAttending = true;
  appendChatMessage(`Bot: Voc칡 retomou o atendimento com o usu치rio ${userId}`, "system");
});

// 游댳 Alterna exibi칞칚o da fila ao clicar no sino
function toggleQueue() {
  notificationList.style.display = notificationList.style.display === "block" ? "none" : "block";
}

// 游댉 Toca som quando um novo usu치rio entra na fila
function playNotificationSound() {
  if (soundEnabled) {
    const audio = new Audio("notification.mp3");
    audio.play().catch((err) => console.error("Erro ao reproduzir som:", err));
  }
}

// 游댳 Adiciona mensagens ao chat
function appendChatMessage(message, sender) {
  const messageElement = document.createElement("li");
  messageElement.classList.add("message", sender);

  const avatar = document.createElement("img");
  avatar.src = sender === "attendant" ? "attendant-avatar.png" : "user-avatar.png";
  avatar.classList.add("avatar");

  const textElement = document.createElement("span");
  textElement.textContent = message;
  textElement.classList.add("text");

  sender === "attendant"
    ? messageElement.append(avatar, textElement)
    : messageElement.append(textElement, avatar);

  messagesList.appendChild(messageElement);
  updateScroll();
}

// 游댳 Atualiza scroll do chat
function updateScroll() {
  requestAnimationFrame(() => {
    document.querySelector(".chat-main").scrollTop = messagesList.scrollHeight;
  });
}

// 游댳 Controle do som
toggleSoundButton.addEventListener("click", () => {
  soundEnabled = !soundEnabled;
  toggleSoundButton.textContent = soundEnabled ? "Som: Ligado" : "Som: Mutado";
});

// 游댳 Enviar mensagem do atendente
form.addEventListener("submit", (e) => {
  e.preventDefault();
  const input = document.getElementById("m");
  const message = input.value.trim();
  if (!message) return;

  appendChatMessage(message, "attendant");
  socket.emit("chat message", message);
  input.value = "";
});

// 游댳 Recebendo mensagens do usu치rio
socket.on("chat message", (data) => {
  appendChatMessage(data.message, "user");
});

// 游댳 Exibir mensagens do sistema
socket.on("system message", (msg) => {
  appendChatMessage("Sistema: " + msg, "system");
});

// 游댳 Indicador de digita칞칚o
socket.on("typing", (data) => {
  typingIndicator.style.display = "block";
  typingIndicator.textContent = data + " est치 digitando...";
  setTimeout(() => {
    typingIndicator.style.display = "none";
  }, 2000);
});

// 游댳 Enviar indicador de digita칞칚o
document.getElementById("m").addEventListener("input", () => {
  socket.emit("typing", "Usu치rio");
});

// 游댳 Finalizar atendimento
endServiceButton.addEventListener("click", () => {
  if (!isAttending) {
    alert("Voc칡 n칚o est치 atendendo nenhum usu치rio.");
    return;
  }

  socket.emit("end service");
  isAttending = false; // 游댳 Libera o atendente para pegar outro usu치rio
  currentUser = null;
  messagesList.innerHTML = ""; // 游댳 Apaga o chat ao finalizar o atendimento
  appendChatMessage("游댳 Atendimento finalizado. Aguardando pr칩ximo usu치rio...", "system");
  alert("Atendimento finalizado. Voc칡 pode aceitar outro usu치rio.");
});

// 游댳 Atualiza a fila de espera em tempo real
socket.on("updateQueue", (waitingQueue) => {
  queueList.innerHTML = ""; // Limpa a lista
  notificationCount.textContent = waitingQueue.length;
  notificationCount.style.display = waitingQueue.length > 0 ? "block" : "none";

  if (waitingQueue.length === 0) {
    queueList.innerHTML = "<li>Ningu칠m na fila</li>";
    return;
  }

  waitingQueue.forEach((user) => {
    const li = document.createElement("li");
    li.innerHTML = `<strong>${user.fullName || "Usu치rio"}</strong> - ${user.sector || "Setor Desconhecido"}<br>
      Matr칤cula: ${user.matricula || "N/A"}
      <button class="btn-atender" onclick="acceptUser('${user.id}')">Atender</button>`;
    queueList.appendChild(li);
  });

  playNotificationSound();
});

// 游댳 Atendente aceita um usu치rio da fila
function acceptUser(userId) {
  if (isAttending) {
    alert("丘멆잺 Voc칡 j치 est치 conectado a um usu치rio. Finalize o atendimento antes de aceitar outro.");
    return;
  }

  socket.emit("acceptUser", userId);
  isAttending = true; // 游댳 Define que o atendente agora est치 ocupado
  currentUser = userId;

  messagesList.innerHTML = ""; // 游댳 Apaga o chat ao iniciar um novo atendimento
  appendChatMessage("游댳 Novo atendimento iniciado.", "system");
}

// 游댳 Resposta quando o usu치rio j치 foi atendido
socket.on("userAlreadyAttended", () => {
  alert("Usu치rio j치 foi atendido por outro atendente.");
  isAttending = false; // 游댳 Libera o atendente caso o usu치rio j치 tenha sido atendido
});

// 游댳 Se o usu치rio se desconectar, liberar o atendente
socket.on("userDisconnected", () => {
  appendChatMessage("丘멆잺 O usu치rio se desconectou. Atendimento encerrado.", "system");
  isAttending = false;
  currentUser = null;
  messagesList.innerHTML = ""; // 游댳 Apaga o chat ap칩s desconex칚o do usu치rio
});
